/*
Copyright Â© 2019 Phage Ky <kyp0717@gmail.com>

*/
package cmd

import (
	"fmt"
	"github.com/davecgh/go-spew/spew"
	"github.com/spf13/cobra"
	"io/ioutil"
	// "log"
	"crypto/tls"
	"encoding/json"
	"net/http"
)

type Request struct {
	Symbol  string `json:"symbol"`
	Name    bool   `json:"name"`
	SecType string `json:"secType"`
}

const baseURL = "https://localhost:5000/v1/portal/"
const endpt = "iserver/accounts"

// getContractInfoCmd represents the getContractInfo command
var reqStkCmd = &cobra.Command{
	Use:   "req-stk",
	Short: "request stock data",
	Long:  `A longer description to quickly create a Cobra application.`,
	Run: func(cmd *cobra.Command, args []string) {
		symbol, _ := cmd.Flags().GetString("symbol")
		if conid == "" {
			reqStk("AAPL")

		} else {
			reqStk(symbol)
		}
	},
}

func init() {
	rootCmd.AddCommand(reqStkCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// getContractInfoCmd.PersistentFlags().String("foo", "", "A help for foo")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	reqStkCmd.Flags().String("symbol", "AAPL", "specify Contract ID for instrument")
}

func reqStk(symbol string) {
	http.DefaultTransport.(*http.Transport).TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	url := baseURL + "iserver/contract/" + conid + "/info"
	fmt.Println(url)
	resp, err := http.Get(url)

	if err != nil {
		fmt.Printf("HTTP Req failed with error %s\n", err)
	}
	defer resp.Body.Close()

	data, _ := ioutil.ReadAll(resp.Body)
	fmt.Println(string(data))

	var ctx ContractInfo

	json.Unmarshal([]byte(data), &ctx)

	fmt.Printf("%+v\n", ctx)
	spew.Dump(ctx)

}
